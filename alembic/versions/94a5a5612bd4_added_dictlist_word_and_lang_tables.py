"""added dictlist, word and lang tables

Revision ID: 94a5a5612bd4
Revises: b1637d28f51b
Create Date: 2025-10-19 19:44:08.900835

"""

from collections.abc import Sequence

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "94a5a5612bd4"
down_revision: str | Sequence[str] | None = "b1637d28f51b"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "language",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("code", sa.String(length=5), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_language")),
        sa.UniqueConstraint("code", name=op.f("uq_language_code")),
    )
    op.create_table(
        "dictlist",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("lang_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("max_words_limit", sa.Integer(), nullable=True),
        sa.Column(
            "created",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("timezone('utc', now())"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["lang_id"], ["language.id"], name=op.f("fk_dictlist_lang_id_language")
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
            name=op.f("fk_dictlist_user_id_user"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_dictlist")),
    )
    op.create_table(
        "word",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("lang_id", sa.Integer(), nullable=False),
        sa.Column("new_word", sa.String(), nullable=False),
        sa.Column("translation", sa.String(), nullable=True),
        sa.Column("context", sa.ARRAY(sa.String()), nullable=False),
        sa.Column("note", sa.String(), nullable=True),
        sa.Column(
            "created",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("timezone('utc', now())"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["lang_id"], ["language.id"], name=op.f("fk_word_lang_id_language")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_word")),
    )
    op.create_table(
        "dictlist_words",
        sa.Column("dictlist_id", sa.Integer(), nullable=False),
        sa.Column("word_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["dictlist_id"],
            ["dictlist.id"],
            name=op.f("fk_dictlist_words_dictlist_id_dictlist"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["word_id"],
            ["word.id"],
            name=op.f("fk_dictlist_words_word_id_word"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("dictlist_id", "word_id", name="dictlist_word_pk"),
    )
    op.alter_column(
        "user",
        "created",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.TIMESTAMP(timezone=True),
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "user",
        "full_access_deadline",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.TIMESTAMP(timezone=True),
        existing_nullable=False,
        existing_server_default=sa.text("(now() + '356 days'::interval)"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "user",
        "full_access_deadline",
        existing_type=sa.TIMESTAMP(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
        existing_server_default=sa.text("(now() + '356 days'::interval)"),
    )
    op.alter_column(
        "user",
        "created",
        existing_type=sa.TIMESTAMP(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_table("dictlist_words")
    op.drop_table("word")
    op.drop_table("dictlist")
    op.drop_table("language")
    # ### end Alembic commands ###
